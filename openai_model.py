from dotenv import load_dotenv
import os
from openai import OpenAI
from fetch_oura_data import get_all_oura_data

# Load environment variables
load_dotenv('.env')

# Initialize the client
client = OpenAI(api_key=os.getenv("OPENAI"))

def generate_health_insights(oura_data, sleep_rating, stress_level):
    """
    Generates a personalized message using GPT-4.
    
    Args:
        oura_data (dict): Oura Ring data
        sleep_rating (int): User's sleep rating (1-100)
        stress_level (int): User's stress level (1-100)
    
    Returns:
        str: A personalized message generated by GPT-4.
    """
    prompt = f"""
You are a helpful health coach writing personalized daily messages based on the following user data from the last 4 days:

- Sleep Data: {oura_data['sleep']}
- Readiness Data: {oura_data['readiness']}
- Activity Data: {oura_data['activity']}
- Workout Data: {oura_data['workout']}
- Today's Sleep Rating: {sleep_rating}/100 (100 = slept better than sleeping beauty, 1 = barely slept)
- Today's Stress Level: {stress_level}/100 (100 = being chased by a lion, 1 = totally relaxed)

Analyze the trends from the 4-day data. Write 3 practical actions for today and end with a motivational message to help the user achieve their health goals.
Focus on improvements or changes needed based on the data trends. Add emojis to make the message more engaging. The message cannot be longer than 1500 characters.
"""
    try:
        response = client.chat.completions.create(
            model="gpt-4.1-nano",
            messages=[
                {"role": "system", "content": "You are a health coach who provides motivational advice based on data trends."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Error generating insights: {e}"

def process_user_data(sleep_rating, stress_level):
    """
    Process user data and generate health insights
    
    Args:
        sleep_rating (int): User's sleep rating (1-100)
        stress_level (int): User's stress level (1-100)
    
    Returns:
        str: Generated health insights
    """
    # Get Oura Ring data
    oura_data = get_all_oura_data()
    
    # Generate insights
    return generate_health_insights(oura_data, sleep_rating, stress_level)