from dotenv import load_dotenv
import os
from openai import OpenAI
from fetch_data import fetch_data_sleep_readiness, fetch_data_activity


load_dotenv('.env')

# Initialize the client
client = OpenAI(api_key=os.getenv("OPENAI"))

def get_user_input():
    """Get user's subjective ratings for sleep and stress"""
    while True:
        try:
            sleep_rating = int(input("How well did you sleep last night? (1-100, where 1 is where you slept for 1 minute and 100 is you slept better than sleeping beauty): "))
            if 1 <= sleep_rating <= 100:
                break
            print("Please enter a number between 1 and 100")
        except ValueError:
            print("Please enter a valid number")
    
    while True:
        try:
            stress_level = int(input("How stressed do you feel today? (1-100, where 1 is you feel so relaxed that you think you could be deadand 100 is you feel that you are chased by a lion.): "))
            if 1 <= stress_level <= 100:
                break
            print("Please enter a number between 1 and 100")
        except ValueError:
            print("Please enter a valid number")
    
    return {
        "subjective_sleep": sleep_rating,
        "stress_level": stress_level
    }

def get_oura_data():
    """Get the latest data from Oura Ring API"""
    readiness_url = 'https://api.ouraring.com/v2/usercollection/daily_readiness'
    sleep_url = 'https://api.ouraring.com/v2/usercollection/daily_sleep'
    activity_url = 'https://api.ouraring.com/v2/usercollection/daily_activity'
    
    readiness = fetch_data_sleep_readiness(readiness_url)
    sleep = fetch_data_sleep_readiness(sleep_url)
    activity = fetch_data_activity(activity_url)
    
    # Get user's subjective ratings
    user_ratings = get_user_input()
    
    return {
        "sleep": sleep,
        "readiness": readiness,
        "activity": activity,
        "subjective_sleep": user_ratings["subjective_sleep"],
        "stress_level": user_ratings["stress_level"]
    }

def generate_message(data):
    """
    Generates a personalized message using GPT-4.
    
    Args:
        data (dict): A dictionary containing user metrics (e.g., sleep, activity).
    
    Returns:
        str: A personalized message generated by GPT-4.
    """
    prompt = f"""
You are a helpful health coach writing personalized daily messages based on the following user data from the last 4 days:

- Sleep Data: {data['sleep']}
- Readiness Data: {data['readiness']}
- Activity Data: {data['activity']}
- Today's Sleep Rating: {data['subjective_sleep']}/100
- Today's Stress Level: {data['stress_level']}/100

Analyze the trends from the 4-day data. Write 3 practical actions for today and end with a motivational message to help the user achieve their health goals.
Focus on improvements or changes needed based on the data trends.
"""
    try:
        response = client.chat.completions.create(
            model="gpt-4.1-nano",
            messages=[
                {"role": "system", "content": "You are a health coach who provides motivational advice based on data trends."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Error: {e}"

# Get real Oura Ring data and user input
user_data = get_oura_data()

# Generate and print the message
message = generate_message(user_data)
print("\nYour Personalized Health Insights:\n")
print(message)