from dotenv import load_dotenv
import os
from openai import OpenAI
from fetch_data import fetch_data_sleep_readiness_workout, fetch_data_activity
from whatsapp import send_whatsapp_message


load_dotenv('.env')

# Initialize the client
client = OpenAI(api_key=os.getenv("OPENAI"))

def get_user_input():
    """Get user's subjective ratings for sleep and stress"""
    while True:
        try:
            sleep_rating = int(input("How well did you sleep last night? (1-100,  1 = barely slept, 100 = slept better than sleeping beauty)"))
            if 1 <= sleep_rating <= 100:
                break
            print("Please enter a number between 1 and 100")
        except ValueError:
            print("Please enter a valid number")
    
    while True:
        try:
            stress_level = int(input("How stressed do you feel today? (1-100, 1 = totally relaxed 100 = being chased by a lion)"))
            if 1 <= stress_level <= 100:
                break
            print("Please enter a number between 1 and 100")
        except ValueError:
            print("Please enter a valid number")
    
    return {
        "subjective_sleep": sleep_rating,
        "stress_level": stress_level
    }

def get_oura_data():
    """Get the latest data from Oura Ring API"""
    readiness_url = 'https://api.ouraring.com/v2/usercollection/daily_readiness'
    sleep_url = 'https://api.ouraring.com/v2/usercollection/daily_sleep'
    activity_url = 'https://api.ouraring.com/v2/usercollection/daily_activity'
    workout_url = 'https://api.ouraring.com/v2/usercollection/daily_workout'
    
    readiness = fetch_data_sleep_readiness_workout(readiness_url)
    sleep = fetch_data_sleep_readiness_workout(sleep_url)
    workout = fetch_data_sleep_readiness_workout(workout_url)
    activity = fetch_data_activity(activity_url)
    
    # Get user's subjective ratings
    user_ratings = get_user_input()
    
    return {
        "sleep": sleep,
        "readiness": readiness,
        "activity": activity,
        "workout": workout,
        "subjective_sleep": user_ratings["subjective_sleep"],
        "stress_level": user_ratings["stress_level"]
    }

def generate_message(data):
    """
    Generates a personalized message using GPT-4.
    
    Args:
        data (dict): A dictionary containing user metrics (e.g., sleep, activity).
    
    Returns:
        str: A personalized message generated by GPT-4.
    """
    prompt = f"""
You are a helpful health coach writing personalized daily messages based on the following user data from the last 4 days:

- Sleep Data: {data['sleep']}
- Readiness Data: {data['readiness']}
- Activity Data: {data['activity']}
- Workout Data: {data['workout']}
- Today's Sleep Rating: {data['subjective_sleep']}/100 (100 = slept better than sleeping beauty, 1 = barely slept)
- Today's Stress Level: {data['stress_level']}/100 (100 = being chased by a lion, 1 = totally relaxed)

Analyze the trends from the 4-day data. Write 3 practical actions for today and end with a motivational message to help the user achieve their health goals.
Focus on improvements or changes needed based on the data trends. Add emojis to make the message more engaging. The message cannot be longer than 1500 characters.
"""
    try:
        response = client.chat.completions.create(
            model="gpt-4.1-nano",
            messages=[
                {"role": "system", "content": "You are a health coach who provides motivational advice based on data trends."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Error: {e}"

def main():
    # Get real Oura Ring data and user input
    user_data = get_oura_data()

    # Generate the message
    message = generate_message(user_data)
    
    # Send the message via WhatsApp
    if send_whatsapp_message(message):
        print("Health insights sent to your WhatsApp!")
    else:
        print("Failed to send WhatsApp message. Here are your insights:\n")
        print(message)

if __name__ == "__main__":
    main()